// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


//arr1,arr2 : the arrays
// n, m: size of arrays
vector<int> findUnion(int arr1[], int arr2[], int n, int m)
{
    vector<int> result;
    unordered_set<int> set;
    int i=0, j=0;
    
    while(i<n && j<m)                //while loop with two pointers on both array
    {
        if(arr1[i]==arr2[j])
        {
            if(set.find(arr1[i])==set.end())  //ensures unique element
            {
                set.insert(arr1[i]);
            }
       i++; j++;
        }
        else if(arr1[i]<arr2[j])             // to ensure ascending order
        {
            if(set.find(arr1[i])==set.end())
            {
                set.insert(arr1[i]);
            }
       i++;
        }
        else
        {
            if(set.find(arr2[j])==set.end())
            {
                set.insert(arr2[j]);
            }
       j++;
        }
    }
    
    while(j<m)                      // when 1st array get exhausted
        {
            if(set.find(arr2[j])==set.end())
            {
                set.insert(arr2[j]);
            }
            j++;
        }
    
    while(i<n)
        {
            if(set.find(arr1[i])==set.end())
            {
                set.insert(arr1[i]);
            }
            i++;
        }
    
    //updating in vector
    for(auto it = set.begin(); it!= set.end(); ++it)
    {
        result.push_back(*it);
    }
    
    return result;
}

// { Driver Code Starts.

int main() {
	
	int T;
	cin >> T;
	
	while(T--){
	    
	    
	    
	    int N, M;
	    cin >>N >> M;
	    
	    int arr1[N];
	    int arr2[M];
	    
	    for(int i = 0;i<N;i++){
	        cin >> arr1[i];
	    }
	    
	    for(int i = 0;i<M;i++){
	        cin >> arr2[i];
	    }
	    
	    vector<int> ans = findUnion(arr1,arr2, N, M);
	    for(int i: ans)cout<<i<<' ';
	    cout << endl;
	    
	}
	
	return 0;
}  // } Driver Code Ends


Input:
2 8
1 35
6 9 13 15 20 25 29 46

Its Correct output is:
1 6 9 13 15 20 25 29 35 46

And Your Code's output is:
29 25 15 1 6 20 9 46 35 13

If you are facing any issue on this page
